{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Geocoder;\nexport default Geocoder = {\n  apiKey: null,\n  options: {},\n  init: function init(apiKey) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.apiKey = apiKey;\n    this.options = options;\n  },\n\n  get isInit() {\n    return !!this.apiKey;\n  },\n\n  from: function from() {\n    var _this = this;\n\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    return function _callee() {\n      var queryParams, url, response, data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Geocoder.isInit) {\n                _context.next = 2;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.NOT_INITIATED,\n                message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n              };\n\n            case 2:\n              if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n                latlng: params[0] + \",\" + params[1]\n              };else if (params[0] instanceof Array) queryParams = {\n                latlng: params[0][0] + \",\" + params[0][1]\n              };else if (params[0] instanceof Object) queryParams = {\n                latlng: (params[0].lat || params[0].latitude) + \",\" + (params[0].lng || params[0].longitude)\n              };else if (typeof params[0] === 'string' && params[1] instanceof Object) queryParams = {\n                address: params[0],\n                bounds: params[1]\n              };else if (typeof params[0] === 'string') queryParams = {\n                address: params[0]\n              };\n\n              if (queryParams) {\n                _context.next = 5;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.INVALID_PARAMETERS,\n                message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n              };\n\n            case 5:\n              queryParams = _objectSpread(_objectSpread({\n                key: _this.apiKey\n              }, _this.options), queryParams);\n              url = \"https://maps.google.com/maps/api/geocode/json?\" + toQueryParams(queryParams);\n              _context.prev = 7;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 10:\n              response = _context.sent;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](7);\n              throw {\n                code: Geocoder.Errors.FETCHING,\n                message: \"Error while fetching. Check your network.\",\n                origin: _context.t0\n              };\n\n            case 16:\n              _context.prev = 16;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 19:\n              data = _context.sent;\n              _context.next = 25;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t1 = _context[\"catch\"](16);\n              throw {\n                code: Geocoder.Errors.PARSING,\n                message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n                origin: response\n              };\n\n            case 25:\n              if (!(data.status !== 'OK')) {\n                _context.next = 27;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.SERVER,\n                message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n                origin: data\n              };\n\n            case 27:\n              return _context.abrupt(\"return\", data);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[7, 13], [16, 22]], Promise);\n    }();\n  },\n  Errors: {\n    NOT_INITIATED: 0,\n    INVALID_PARAMETERS: 1,\n    FETCHING: 2,\n    PARSING: 3,\n    SERVER: 4\n  }\n};\n\nfunction encodeBounds(bounds) {\n  var southwest = bounds.southwest;\n  var northeast = bounds.northeast;\n  return encodeURIComponent(southwest.lat) + \",\" + encodeURIComponent(southwest.lng) + \"|\" + encodeURIComponent(northeast.lat) + \",\" + encodeURIComponent(northeast.lng);\n}\n\nfunction encodeComponent(key, value) {\n  if (key === 'bounds') {\n    return encodeBounds(value);\n  }\n\n  return encodeURIComponent(value);\n}\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(function (key) {\n    return !!object[key];\n  }).map(function (key) {\n    return key + \"=\" + encodeComponent(key, object[key]);\n  }).join(\"&\");\n}","map":{"version":3,"names":["Geocoder","apiKey","options","init","isInit","from","params","code","Errors","NOT_INITIATED","message","isNaN","queryParams","latlng","Array","Object","lat","latitude","lng","longitude","address","bounds","INVALID_PARAMETERS","JSON","stringify","key","url","toQueryParams","fetch","response","FETCHING","origin","json","data","PARSING","status","SERVER","encodeBounds","southwest","northeast","encodeURIComponent","encodeComponent","value","object","keys","filter","map","join"],"sources":["C:/Users/chouk/OneDrive/Bureau/my-app/node_modules/react-native-geocoding/Geocoder.js"],"sourcesContent":["/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n\tapiKey : null,\n\toptions : {},\n\t\n\t/**\n\t * Initialize the module.\n\t * @param {String} apiKey The api key of your application in google.\n\t * @param {Object} [options] extra options for your geocoding request.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n\t */\n\tinit(apiKey, options = {}) {\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = options;\n\t},\n\n\t/**\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\n\t */\n\tget isInit() {\n\t\treturn !!this.apiKey;\n\t},\n\n\t/**\n\t * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n\t * Accepted parameters:\n\t * <ul>\n\t *     <li>from(Number latitude, Number longitude)</li>\n\t *     <li>from(Array [latitude, longitude])</li>\n\t *     <li>from(Object {latitude, longitude})</li>\n\t *     <li>from(Object {lat, lng})</li>\n\t *     <li>from(String address)</li>\n\t * </ul>\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n\t */\n\tasync from(...params) {\n\t\t// check api key\n\t\tif (!Geocoder.isInit)\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.NOT_INITIATED,\n\t\t\t\tmessage : \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\",\n\t\t\t};\n\n\t\t// --- convert parameters ---\n\t\tlet queryParams;\n\n\t\t// (latitude, longitude)\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\n\t\t\tqueryParams = {latlng : `${params[0]},${params[1]}`};\n\n\t\t// [latitude, longitude]\n\t\telse if (params[0] instanceof Array)\n\t\t\tqueryParams = {latlng : `${params[0][0]},${params[0][1]}`};\n\n\t\t// {latitude, longitude}  or {lat, lng}\n\t\telse if (params[0] instanceof Object)\n\t\t\tqueryParams = {latlng : `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`};\n\n\t\t// address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n\t\telse if (typeof params[0] === 'string' && params[1] instanceof Object)\n\t\t\tqueryParams = {address : params[0], bounds : params[1]};\n\n\t\t// address\n\t\telse if (typeof params[0] === 'string')\n\t\t\tqueryParams = {address : params[0]};\n\n\t\t// --- start geocoding ---\n\n\t\t// check query params\n\t\tif (!queryParams)\n\t\t// no query params, means parameters where invalid\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.INVALID_PARAMETERS,\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\n\t\t\t};\n\n\t\tqueryParams = { key: this.apiKey, ...this.options, ...queryParams }\n\t\t// build url\n\t\tconst url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n\n\t\tlet response, data;\n\n\t\t// fetch\n\t\ttry {\n\t\t\tresponse = await fetch(url);\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.FETCHING,\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\n\t\t\t\torigin : error,\n\t\t\t};\n\t\t}\n\n\t\t// parse\n\t\ttry {\n\t\t\tdata = await response.json();\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.PARSING,\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n\t\t\t\torigin : response,\n\t\t\t};\n\t\t}\n\n\t\t// check response's data\n\t\tif (data.status !== 'OK')\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.SERVER,\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n\t\t\t\torigin : data,\n\t\t\t};\n\n\t\treturn data;\n\t},\n\n\t/**\n\t * All possible errors.\n\t */\n\tErrors : {\n\t\t/**\n\t\t * Module hasn't been initiated. Call {@link Geocoder.init}.\n\t\t */\n\t\tNOT_INITIATED : 0,\n\n\t\t/**\n\t\t * Parameters are invalid.\n\t\t */\n\t\tINVALID_PARAMETERS : 1,\n\n\t\t/**\n\t\t * Error wile fetching to server.\n\t\t * The error.origin property contains the original fetch error.\n\t\t */\n\t\tFETCHING : 2,\n\n\t\t/**\n\t\t * Error while parsing server response.\n\t\t * The error.origin property contains the response.\n\t\t */\n\t\tPARSING : 3,\n\n\t\t/**\n\t\t * Error from the server.\n\t\t * The error.origin property contains the response's body.\n\t\t */\n\t\tSERVER : 4,\n\t},\n}\n\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\nfunction encodeBounds(bounds) {\n\tconst southwest = bounds.southwest;\n\tconst northeast = bounds.northeast;\n\treturn `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\nfunction encodeComponent(key, value) {\n\tif (key === 'bounds') {\n\t\treturn encodeBounds(value);\n\t}\n\treturn encodeURIComponent(value);\n}\n\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\nfunction toQueryParams(object) {\n\treturn Object.keys(object)\n\t\t.filter(key => !!object[key])\n\t\t.map(key => key + \"=\" + encodeComponent(key, object[key]))\n\t\t.join(\"&\")\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}